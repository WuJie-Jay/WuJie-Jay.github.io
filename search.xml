<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>RoboMaster视觉组学习整理（0）</title>
      <link href="/2022/02/26/RoboMaster%E8%A7%86%E8%A7%89%E9%9C%80%E8%A6%81%E5%AD%A6%E4%B9%A0%E7%9A%84%E4%B8%9C%E8%A5%BF/"/>
      <url>/2022/02/26/RoboMaster%E8%A7%86%E8%A7%89%E9%9C%80%E8%A6%81%E5%AD%A6%E4%B9%A0%E7%9A%84%E4%B8%9C%E8%A5%BF/</url>
      
        <content type="html"><![CDATA[<div align="middle">    <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1446905045&auto=1&height=66"></iframe></div><h1 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h1><p>上学期一直在请教大佬和自学代码的路上，没有什么产出，想着这学期自己写点东西，就从RoboMaster这个比赛写起吧。我是研一上学期参加的比赛，做视觉识别部分。当时的想法很简单，因为很喜欢Linux，个人不太想调电控和焊板子接线，就参加了视觉部分。由于本科专业以及之前工作的关系，其实更熟悉机械结构设计，学视觉主要是因为兴趣，还有想换个方向。做视觉可以开发一些很有趣的东西，学到很多前沿的知识。</p><p>来到新战队之后百废待兴，可以说战队管理工作是我一手带起来的。今年我担任战队项目管理（兼任视觉组长）期间，也发现了一些现实问题：</p><p>一个是队员基础能力弱和经验缺乏带来的队伍上限不高。上学期各组真的是从零开始的——没技术没经验。虽然队里之前有研究生做，但是却没有相关技术传承，连个真正能解答问题的人都没有。例如上届视学组名义上是有几个人的，但由于各种原因都跑路了，只有一位学姐偶尔能说上话，但是很多时候她也无法及时帮忙解决问题。所以我很能理解一些新接触RM视觉的学弟学妹心中的迷茫；</p><p>一个是人员稀缺，目前视觉组只有我和另外一名研究生（之前还有个本科学弟的，前不久因为个人原因退队了……），现阶段再招人也不现实，而且参赛名额有限，所以暂时由我负责两个兵种。希望换届的时候，梯队这边能留下足够多人数；</p><p>所以我打算将RoboMaster视觉的各个方面的技术要点写成一系列的教程，帮助新手入门，也希望对其他战队有一点参考价值。教程代码主要参考了南理工本部Alliance战队上个赛季代码（传送门：<a href="https://github.com/shilei31415/AutoShot">https://github.com/shilei31415/AutoShot</a> ），本部往届的代码写得不错，搭建了一个很好的项目框架，很感谢他们能分享出来，帮助我们新队伍更快成型。</p><p>下面是代码框架，可以先熟悉下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AutoShot</span><br><span class="line"> ├── AutoShot//识别装甲</span><br><span class="line"> │   ├── include//.h文件</span><br><span class="line"> │   │   ├── ANN.h//数字识别</span><br><span class="line"> │   │   ├── Armor.h//Mark匹配</span><br><span class="line"> │   │   ├── Mark.h//识别Mark</span><br><span class="line"> │   │   ├── pnp.h//PnP测距</span><br><span class="line"> │   │   ├── TargetFind.h//调用Armor和Mark</span><br><span class="line"> │   │   └── trajectory.h//考虑空气阻力的抛物线(未使用)</span><br><span class="line"> │   └── src//.cpp文件</span><br><span class="line"> │       ├── ANN.cpp</span><br><span class="line"> │       ├── Armor.cpp</span><br><span class="line"> │       ├── Mark.cpp</span><br><span class="line"> │       ├── pnp.cpp</span><br><span class="line"> │       ├── TargetFind.cpp</span><br><span class="line"> │       └── targetFinderTest.cpp//测试targetFinder</span><br><span class="line"> ├── CMakeLists.txt</span><br><span class="line"> ├── HeroVision.h//常用宏定义</span><br><span class="line"> ├── include.h//常用头文件</span><br><span class="line"> ├── main.cpp</span><br><span class="line"> ├── others//其他功能</span><br><span class="line"> │   ├── Calibrator//标定</span><br><span class="line"> │   │   ├── Calibrate.cpp</span><br><span class="line"> │   │   ├── Calibrator.cpp</span><br><span class="line"> │   │   ├── Calibrator.h</span><br><span class="line"> │   │   ├── cr</span><br><span class="line"> │   │   └── ip</span><br><span class="line"> │   ├── camera//相机驱动</span><br><span class="line"> │   │   ├── CameraApi.h</span><br><span class="line"> │   │   ├── CameraDefine.h</span><br><span class="line"> │   │   ├── CameraStatus.h</span><br><span class="line"> │   │   ├── MindVisionCamera.cpp</span><br><span class="line"> │   │   └── MindVisionCamera.h</span><br><span class="line"> │   ├── JLink//自己编写的调试助手,显示变量随时间的变化</span><br><span class="line"> │   │   ├── JLink.cpp</span><br><span class="line"> │   │   └── JLink.h</span><br><span class="line"> │   ├── picture//程序运行时保存的图片</span><br><span class="line"> │   ├── SerialPort//串口通信</span><br><span class="line"> │   │   ├── SerialPort.cpp</span><br><span class="line"> │   │   ├── SerialPort.h</span><br><span class="line"> │   │   ├── SerialPortTest.cpp</span><br><span class="line"> │   │   └── serial.sh</span><br><span class="line"> │   └── video//程序运行时保存的视频</span><br><span class="line"> ├── README.md</span><br><span class="line"> └── tools//运行及调试时常用函数</span><br><span class="line">     ├── excption//catch excption并保存到txt (未使用)</span><br><span class="line">     │   ├── myExcption.cpp</span><br><span class="line">     │   └── myExcption.h</span><br><span class="line">     ├── MathTool//常用数学函数</span><br><span class="line">     │   └── MathTool.h</span><br><span class="line">     ├── setter//读取参数</span><br><span class="line">     │   ├── model.pb</span><br><span class="line">     │   ├── para.yaml</span><br><span class="line">     │   ├── setter.cpp</span><br><span class="line">     │   └── setter.h</span><br><span class="line">     └── time//计算帧率,控制帧率</span><br><span class="line">         ├── timer.cpp</span><br><span class="line">         └── timer.h</span><br></pre></td></tr></table></figure><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p><strong>在讲代码之前先解答一些大家可能会有的疑问：</strong></p><h2 id="为什么要用Ubuntu系统"><a href="#为什么要用Ubuntu系统" class="headerlink" title="为什么要用Ubuntu系统"></a>为什么要用Ubuntu系统</h2><p><strong>跟 win 相比：</strong></p><ul><li>免费，安全；</li><li>很多软件可以通过 ppa 源下载，不需要跑到网站上下载，比较方便；</li><li>一般的 server 都使用 linux，所以省去了很多开发兼容性的问题；</li><li>shell 厉害；</li><li>占用空间比较小,可以安装在许多硬件上(TX2/NUC)；</li><li>运行速度比Windows快，运行程序时不像Windows需要调用其他许多东西，同样的程序Ubuntu上运行速度比Windows快10%左右；</li><li>权限高，Ubuntu上不存在卸不掉的流氓软件，知道密码甚至可把Ubuntu整个删掉。</li></ul><p><strong>跟其他 linux 相比：</strong></p><ul><li>UI 比较好看；</li><li>文档比较多，用的人比较多，有问题可以一起讨论；</li><li>针对 ubuntu 开发的软件比较多；</li></ul><h2 id="关于ubuntu的建议"><a href="#关于ubuntu的建议" class="headerlink" title="关于ubuntu的建议"></a>关于ubuntu的建议</h2><p>①在自己电脑安装Ubuntu时尽量多分配一些空间，用作平时学习建议至少50G。当然了，如果个人有开发软件的需求，或是跑大型项目、涉及很多图像视频识别时，应尽量分配更多空间，以便不时之需。</p><p>②安装的时候语言建议选择英文，可锻炼英语读写能力，也是因为之后的文件路径默认英文，使用中文路径容易出错。其实安装完成后可以修改语言，但要注意路径保持英文。</p><p>③基本命令要会，不用会太多，“增删改查”及一些常用命令就够了，另外记得安装完系统先换源 <a href="https://www.yisu.com/ask/5536.html">ubuntu更新源是什么意思 - 问答 - 亿速云 (yisu.com)</a> 。<br>“增”可以用命令新建文件、文件夹；<br>“删”可以用命令删除文件、清空文件夹；<br>“改”可以用命令修改文件权限、移动文件；<br>“查”可以用命令查看文件夹中的内容；<br>还有一些脚本语言(shell)，你起码可以用脚本让你的程序实现”开机自启动””程序意外终止后重启”；<br>其他还用很多需要掌握的，建议开始的时候时间较为充裕，尽量用命令，而不是GUI；</p><p>④当你配置完环境，装好程序，马上把你的系统转为镜像文件（虚拟机的话直接用快照功能即可），防止有一天“一切归0”</p><p>⑤最初上手可以安装Ubuntu16。因为16版本的教程比较多，当你熟悉后可以考虑使用18.04或者20.04（这两个版本相关的内容较少，如果报错你可能较难找到解决方法）</p><h2 id="配置OpenCV"><a href="#配置OpenCV" class="headerlink" title="配置OpenCV"></a>配置OpenCV</h2><h3 id="安装-OpenCV-contrib"><a href="#安装-OpenCV-contrib" class="headerlink" title="安装 OpenCV_contrib"></a>安装 OpenCV_contrib</h3><p>OpenCV3.0以上的版本，把一些不稳定的函数放到了第三方库OpenCV_contrib中（比如sift,surf等），为了应用这些功能，我们需要将Contrib中的功能重新加入Opencv。关于OpenCV_contrib，可以参见官方说明 <a href="https://github.com/opencv/opencv_contrib/blob/master/README.md">https://github.com/opencv/opencv_contrib/blob/master/README.md</a> </p><h3 id="配置方法"><a href="#配置方法" class="headerlink" title="配置方法"></a>配置方法</h3><p>主要有两种方法：一种是使用CMake-gui这个图形化界面进行安装（适合对Ubuntu的命令不太熟悉的同学）；另一种是用终端直接输入命令操作，可以参考其他博客，这里就不再讨论。</p><h2 id="安装CLion和PyCharm"><a href="#安装CLion和PyCharm" class="headerlink" title="安装CLion和PyCharm"></a>安装CLion和PyCharm</h2><p>CLion编写C++，PyCharm编写python(神经网络会用到)，python 需要注意配置环境，个人觉得不需要安装anaconda，直接安装Python&gt;3.5,然后用pip配置环境(tensorflow或pytroch和opencv-py….)</p><p>软件安装不需要去找破解，直接注册学校的教育邮箱 <a href="https://blog.csdn.net/qq_40784315/article/details/116106252">https://blog.csdn.net/qq_40784315/article/details/116106252</a> ，然后绑定自己的Jetbrains账户即可免费使用。</p><h2 id="学会使用cmake"><a href="#学会使用cmake" class="headerlink" title="学会使用cmake"></a>学会使用cmake</h2><p>不要求cmake使用的多么6，但至少可以做到：不用CLion也可以编译简单C++程序，会编写CLion中的CMakeLists.txt文件。</p><img src="https://s2.loli.net/2022/02/26/v7zkNnK6uqVPWgd.jpg" alt="cmake.jpg" style="zoom:25%;" /><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>若以后战队发展壮大，团队成员之间可能需要进行大量的文件传输，可以直接使用邮箱，可以实现不同系统之间的传输，同时不用安装其他应用，不用考虑人在不在工作室，不用担心文件丢失。<br>学会使用各种学习资源：<a href="https://www.baidu.com/">Baidu</a>    <a href="https://www.csdn.net/">CSDN</a>    <a href="https://www.bilibili.com/">Bilibili</a>    <a href="https://github.com/">Github</a><br>视觉组同学如果有梯子，完全可以在github上进行代码迭代管理，进一步提升团队协作效率。</p><p>————————————————————-先说这么多，之后想到再补————————————————————- </p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机视觉 </tag>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机视觉研究生建议</title>
      <link href="/2022/02/24/%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2/"/>
      <url>/2022/02/24/%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<div align="middle">    <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1356230976&auto=1&height=66"></iframe></div><p>细想了下，我是接触RM比赛以及计算机视觉后，才有了写博客的想法，所以打算先写点视觉相关的东西。在知乎看到几个回答还不错，这里记录一下，留作后面不断查看回顾。</p><h2 id="如何做好科研"><a href="#如何做好科研" class="headerlink" title="如何做好科研"></a>如何做好科研</h2><p>（1）无他，唯手熟尔，就是多读多写。论文就是越读越快的，我还是本科生的时候我导师告诉我刚入门时候要精读十篇好文章，我现在指导师弟师妹也是给他们挑好几篇文章让他们反复精读，起初水平不够的时候看论文很慢，经常抓不住重点都很正常不用急躁。读多了自然就越来越快了，后期看个摘要，看个插图甚至看个题目都明白大致内容了。关于coding就是多写，多去模仿，非计算机科班出身的我刚读博的时候代码很差，现在也不算好，但是这几年在学习别人的代码后也在慢慢提高，所以现在对于刚进实验室的师弟师妹我都对他们的代码有点要求，至少要做到模块化和复用性，现在github开源这么多有很多好的代码可以去模仿学习，跑跑开源代码多去写写，非常忌惮一个现象就是不动手去写，总是只跑开源代码，跑一个换一个框架，没有开源就什么也不会了，要动手自己去复现一些程序。</p><p>（2）good idea，这个我一直认可我导师的观点。我导师说有时候创新点不是整天天马行空想出来的，而是在你看了很多文章做了很多实验之后自然而然产生的，我的感觉也是这样，当你看了很多文章之后，你会发现解决A问题的思路可能在B问题上能够得到启发，当你做了很多实验之后你才能发现论文里隐藏的瑕疵点或者在某些场景下不适用，发现了问题很自然的就能想到一些解决的ideas。</p><p>（3）现在做视觉的人太多，全世界最聪明的一批人都在做cv dl ai，所以发表一篇好paper真的不简单，你的idea别的学术老油条们很容易就能想到，做的还比你漂亮，所以横向比较那些做理论方面的博士同学可能成果比你早比你多，一定要沉得下心保持自信持续努力，厚积而薄发。</p><p>（4）博士我认为还是要open一点，闭门造车一个人搞还是太难，多去接触接触大牛们的工作，多去听听别人的分享，并且也勇于分享自己的见解与工作，多与别人交流讨论，是有帮助的，多于一个博士而言，除了做出好的工作以外，writing 和presentation 的功力也非常重要，如何精确简洁的用文字描述你的工作，如何面对不同类型的听众来做一个合适的报告，都是很重要的技能，这些平时多思考，多学习，多尝试都能慢慢提高。</p><p>（5）努力与专注，做科研并不有趣，需要你自己内心对科研真心的喜欢，会自主的去关注最新的工作，会为自己做出的工作有自豪感，能够从研究工作找到乐趣，保持每天都努力，完成这场博士学位的马拉松。</p><p>（6）对于视觉而言，arxiv的cvpr版块是每天都必须关注的，cvpr iccv eccv三大顶会，pami ijcv等顶刊的论文必须熟知，iclr npis aaai等次相关的顶会也要关注。tf pytorch keras mxnet caffe等框架至少熟用一个，也要关注这些框架的更新动态。新智元，机器之心，paperweekly，ai研习社等等工作号也都可以关注，每天都会发布领域最新动态。旷视科技，商汤，微软亚研院，图森，依图，腾讯优图等等企业也都可以去申请实习，里面真的大牛太多，资源太好，会学到很多东西。</p><p>（7）愿你做有用的科研，做最好的工作。这里我非诚喜欢胡国圣老师在朋友圈发的三句话，希望他不要打我——喝最烈的威士忌,日最野的哈士奇,做最难的Research。</p><h2 id="微软亚洲研究院的回答"><a href="#微软亚洲研究院的回答" class="headerlink" title="微软亚洲研究院的回答"></a>微软亚洲研究院的回答</h2><p>作者：微软亚洲研究院<br>链接：<a href="https://www.zhihu.com/question/67257036/answer/487324016">https://www.zhihu.com/question/67257036/answer/487324016</a></p><p><strong>针对这个问题，在计算及视觉领域拥有17年的研究经历的微软首席研究员华刚博士有些话想和大家分享，他写下了这篇文章，希望能对计算机视觉领域内的学生和年轻的学者们有所帮助。</strong></p><p>简单说一下这篇文章的背景：从我2015年回到微软亚洲研究院之后接触到很多聪明的实习生。一方面感受到他们对计算机视觉研究的热情，另方面也有感于他们对计算机视觉研究认知的局限性，或者说大一点，是基本研究方法和思路上的局限性，就有想法要对如何做好计算机视觉的研究写点什么。计算机视觉领域国际权威、加州大学洛杉矶分校的朱松纯老师曾经发表一篇关于计算视觉的三个起源和人工智能的评论，全面深刻，引起了很大的反响。我想结合朱老师评论的内容，和我在计算及视觉领域17年的研究经历，也来谈谈如何做好计算机视觉的研究，希望对领域内的学生和年青的研究员能有所帮助。</p><p>“如何做好计算机视觉的研究？”要回答这个问题，我们先要对这个问题的关键词进行分析：如果去掉“计算机视觉”这个限定词，这问题就变成了“如何做好研究？”那么，要回答这个问题，我们就要知道“什么是好的研究？”</p><p>而要定义什么是好的研究，必须回到根本，先要知道：</p><h3 id="什么是研究？"><a href="#什么是研究？" class="headerlink" title="什么是研究？"></a>什么是研究？</h3><p>我们的讨论就从这个问题开始。什么是研究？一个被普遍接受的对研究的广义定义为：研究是为了产生新的知识或者是为已有的知识设计新的应用的系统性的工作。因为我们今天的讨论其实更多集中在科学研究上，先确定狭义的研究的定义为：利用科学的方法来调查解释一个现象或者获取新的知识。</p><p>综合这两个定义，可以看到科学研究从本质上是由三个基本的要素构成：1) 目的：产生新的知识或者是设计出新的应用; 2）手段：科学的方法。缺少这两个要素任何之一都不构成科学研究; 3) 成果：新的知识。所谓新的知识，必须是前人不知道的东西。</p><p>我们很多同学和年轻的研究员认为研究就是写论文、研究成果就是论文，这其实是在观念上走进了一个误区。论文是系统阐述新的知识、新的应用，以及阐述获取这个新知识或者新应用用到了什么样的科学方法的一个载体。论文，作为阐述研究成果的主要手段，必须经过同行的评议通过才能正式发表和被认可。</p><p>在人工智能进入第三个热潮之际，我们看到各种各样关于AI的各种媒体报道层出不穷，一方面，这对大众普及了AI各方面的知识，是积极的。但从另一个方面讲，很多观点没有经过仔细的推敲，也没有同行的评议，一些谬误或者是夸大的观点可能因为广泛传播而被大众接受，结果产生负面的社会影响。这就提醒我们相关领域的研究人员，在对大众媒体去做一些评论的时候，必须仔细斟酌，尽量不传播没有得到检验的观点。</p><p>这就谈到第二个问题：</p><h3 id="什么是好的研究？"><a href="#什么是好的研究？" class="headerlink" title="什么是好的研究？"></a>什么是好的研究？</h3><p>不同领域的研究员对这个问题可能会有不同的看法。</p><p>从计算机科学的角度来讲，尤其是计算机视觉的研究，无论是理论的还是实践的，我们的研究成果最终是要解决现实世界的问题的。在这个方面，我印象比较深刻的还是我在西安交通大学读研究生的时候，沈向洋博士2001年在西安交大做报告提到的一个观点：最好的研究员发现新问题；好的研究员创造新方法解好问题；一般的研究员跟随别人的方法解问题——大家在多次这里看到“新”这个关键词，创新是研究的本质。</p><p>有了这些铺垫，我们首先定义什么是最好的研究。通常认为一个领域中对于某一个问题最好的研究工作有三种：第一篇论文 (The First Paper)，最好的一篇论文 (The Best Paper)，以及最后一篇论文(The Last Paper)。这第一篇论文的含义是说这篇论文率先提出了一个好的问题和方向。最好的一篇论文是什么？那一定是开创性地提出了一种解法，启发了最终解决这个问题的途径。至于最后一篇论文，那一定是彻底把这个问题解决了，从此以后这个问题不再需要继续做进一步的研究。从计算机视觉领域举一个具体的例子来讲，Harris Corner Detector属于最早的一批在图像中检测角点的论文，可以归为第一篇之列。David Lowe博士的SIFT特征检测和局部描述子，可以归为在这个方向上最好的论文之列。那么这个方向的最后一篇呢？ 我认为可能还没有出现。具体到我自己的研究工作，在局部描述子这个方向上，我跟我的同事Matthew Brown和Simon Winder在2007年到2009年之间所做的一系列用机器学习的方法来建立描述子的工作，也实际上为提高局部描述子的性能提供了一个新的思路和方法。</p><p>对于我们很多研究员和学生来讲，一辈子可能都做不到这三种最好的研究工作之一。那是不是就等于说你不能做好的研究工作或者根本不用考虑做研究了呢？肯定不是这样。科学研究是一个共同体。这些最好的研究工作也是在前面很多很多非常扎实（solid）的研究工作的基础上发展出来的。因此，对于年青的研究员和学生而言，应该胸怀大志，去追求做最好的研究工作，但从实际执行上来讲，还是要把一项一项具体的工作先做扎实了。</p><p>怎么做到把研究工作做扎实了？首先，你必须对你要解的问题有一个全面深刻的了解，包括为什么要解这个问题、解这个问题有什么意义呢、以前有没有试图解决同样或者类似问题的先例，如果有，你就要全面了解前人都提出了什么样的解法、他们的解法都有什么样的优势和缺陷……最后，你的解法解决了前面这些解法不能解决的问题呢，或者是你的解法处理了什么样的他们不能处理的缺陷了？这些问题的答案如果都有了，那么，在写论文的过程中要注意的就是，1）你的假设是什么？2）你怎么验证了你的假设？这个验证既可以是理论上的证明，也可以是实验的验证。我们很多学生和年青的研究员，写论文的时候没有找到内在的逻辑关系，很多观点都是似是而非。或者说重一点，在论文撰写方面的训练严重不足。你的研究如果到了写论文的阶段，那就必须要有明确的观点提出来。这个观点必须明确无误，只有这样你才能被称为形成了新的知识。你的每一个观点都必须在理论上或者是实验中得到验证。另外，论文的撰写是为了让人看懂，不是让人看不懂，所以我们在撰写过程中必须尽量保证不去假设读者已经拥有了某些方面的知识。做好了这些，基本上你就有很大的可能性能够做出扎实（solid)的研究工作。</p><p>然后回到我们讨论的主题：</p><h3 id="如何做好计算机视觉的研究工作？"><a href="#如何做好计算机视觉的研究工作？" class="headerlink" title="如何做好计算机视觉的研究工作？"></a>如何做好计算机视觉的研究工作？</h3><p>其实，要回答这个问题，将我上面讲的所有观点加上“计算机视觉领域”这个限定词就行了。我这儿结合计算机视觉研究的一些现状及朱松纯老师的一些观点来进一步谈谈我的观点。</p><p>首先谈谈我观察到的一些现象。很多年轻的学生，现在讨论问题的时候都用这样的谈话：我发现用FC6层的特征，比用FC7层的特征，在某个图像数据集上比现在最好的算法提高了1.5%的识别精度，老师我们可以写论文了（如果大家不能理解这句话，FC6和FC7是表示AlexNet的两个中间输出层）。我想请问，你在这个过程中发现了什么样的普适的新的知识吗，又或者，在不是普适的情况下，你在什么限定条件下一定能够看到这样的识别精度提高了？</p><p>不错，提高识别精度是一个很好的目标，但要注意，计算机视觉的研究是要解决识别的问题，不是解某一个图像数据集。这些图像数据集提供了很好的验证你的假设和方法的手段，但如果你没有遵循科学的方法和和手段去设计你的算法和实验，你也不可能得到一个科学的结论，从而也不能产生新的知识，更不用谈对这个领域做出贡献。朱松纯老师在他的评论中提到，很多学生认为，计算机视觉现在就是调深度神经网络的参数，也就是说的这个问题。</p><p>所以，具体到对于刚开始从事计算机视觉研究的学生来讲，要做好这方面的研究，我觉得第一步还是要系统学习一下计算机视觉的课程，全面了解一下计算机视觉这个领域的来龙去脉、这个领域都有哪些基本的问题、哪些问题已经解得比较成熟而哪些问题还在初级阶段……这里，推荐所有的学生学习两本经典教材《Computer Vision: A Modern Approach》和《Computer Vision: Algorithms and Applications》，可以先读完第一本再读第二本。</p><p>只有对这个领域有了一个初步的全面了解，你才能够找到自己感兴趣的那个问题。在众多的问题当中，你是希望做三维重建，还是做图像识别、物体跟踪，又或是做计算摄影呢？做研究其实不是一个完全享乐的的过程，你必须要有足够的兴趣来保证你能持续地走下去，这在你感觉自己当前研究的思路走不下去的时候尤其具有重要意义。当你确定你感兴趣的问题，你应该首先全面调研一下这个问题的来龙去脉。这就意味着你不能只读过去五年的论文。你可以从过去一年的论文开始，慢慢追溯回到过去很久的相关的论文。有些时候，你会惊讶地发现前人想问题的深度。研究的英文单词是Research，拆开是Re-Search，用中文直译就是重新搜索和发现，而不是直接发现，其实就是说你要首先对这个问题做追本溯源。朱松纯老师提到的我们很多学生现在不读五年以前的论文，说的也是这个道理。</p><p>当你做好了这些，你必须钻进计算视觉的一个小的领域。人的精力是有限的，这就意味着你不可能把很多事情同时做好，所以在你选好方向之后，就要把你的精力集中在你感兴趣的一个问题上， 努力成为这个方面的专家。研究是一项长跑，很多时候，你在一个方向上比别人坚持久一点， 你就有机会超越他而成为某个方面的专家。最后，我也来谈谈深度学习对计算机视觉的影响。在这里，我对马里兰大学Rama Chellapa教授在Tom Huang教授80岁生日论坛上表达的观点非常认可，他认为，深度学习网络就像一个Pasta Machine：你把该放的东西放进去，它能给你产生好吃的Pasta。同时它也是一个Equalizer：无论你在计算机视觉领域有40年的经验还是0年的经验，只要你会用Caffee，你在一些问题，比方说图像识别上，都能产生差不多的结果。他开玩笑说这有点伤自尊 (It hurts my ego!)，但我们还是应该把它作为一个好的工具拥抱它。我想，他的言外之意，是我们的研究应该做得更深，要去理解这个工具为什么能够工作得比较好，从而产生新的知识去指导将来的研究和应用。</p><p>我认为，对于年轻的学生来讲，从深度学习的方法开始学习没有什么问题，但必须要进一步去了解一下其他的数学和算法工具，像统计贝叶斯的方法、优化的方法、信号处理的方法等等等的。计算机视觉的问题，其本质是不适定的反问题，解这一类问题需要多种方法的结合。这里面有深度学习解得比较好的问题，像图像识别，也有深度学习解不了的问题，像三维重建和识别。</p><p>任何研究领域包括计算机视觉的研究，对处在研究初期的学生而言， 更重要的是掌握足够的数学工具，培养一种正式思维（Formal Thinking）的能力，这样，遇到实际的问题就能以一种理论上正确的思路去解决这个问题。</p><p>作为结束语，我想对在从事或者有志于从事计算机视觉研究的学生说，计算机视觉的研究处在一个非常好的时期，有很多我们原来解不了的问题现在能够解得比较好了，像人脸识别，尽管我们其实还没有从真正意义上达到人类视觉系统对人脸识别的鲁棒程度。但我们离真正让计算机能够像人看和感知这个世界还有很远的距离。在我们达到这个目标之前，深度学习的方法可能是这个过程中一个重要的垫脚石，同时我们还要将更多的新的方法和工具带入这个领域来进一步推动这个领域的发展。</p><h3 id="作者简介"><a href="#作者简介" class="headerlink" title="作者简介"></a>作者简介</h3><p>华刚博士是微软首席研究员，研究重点是计算机视觉、模式识别、机器学习、人工智能和机器人，以及相关技术在云和移动智能领域的创新应用。他因在图像和视频中无限制环境人脸识别研究做出的突出贡献，于2015年被国际模式识别联合会（International Association on Pattern Recognition）授予”生物特征识别杰出青年研究员”奖励，因其在计算机视觉和多媒体研究方面的杰出贡献，于2016年被遴选为国际模式识别联合会院士（IAPR Fellow）和国际计算机联合会杰出科学家(ACM Distinguished Scientist) 。他担任过CVPR 2014/2017、ICCV 2011、ACM MM 2011/ 2012/ 2015/2017、ICIP 2012/2013/2015/2016、ICASSP 2012/ 2013等十多个顶级国际会议的领域主席，将担任CVPR 2019的程序主席。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机视觉 </tag>
            
            <tag> 科研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/02/23/hello-world/"/>
      <url>/2022/02/23/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
